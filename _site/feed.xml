<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
	<channel>
		<title>小鹏的日志</title>
		<description>chunpat</description>
		<link>/</link>
		<atom:link href="/" rel="self" type="application/rss+xml" />
		
			<item>
				<title>gmk mini主机</title>
				<description>&lt;h2 id=&quot;pve-网卡竟然不是开启的需要手动开启&quot;&gt;pve 网卡竟然不是开启的，需要手动开启&lt;/h2&gt;

&lt;p&gt;买了两个硬盘，一个装win，一个装pve，原先装了pve, 之后win装了驱动后，回到pve里面的时候，网口的指示灯是不亮的，
ip addr 显示网卡state down。&lt;/p&gt;

&lt;p&gt;通过命令开启。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;ip link set enp1s0 up
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2024年08月18日 14:50:54 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
</description>
				<pubDate>Sun, 04 Aug 2024 00:00:00 +0800</pubDate>
				<link>/gmk-setting.html</link>
				<guid isPermaLink="true">/gmk-setting.html</guid>
			</item>
		
			<item>
				<title>搭建旁路由+科学上网</title>
				<description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;旁路由可以不影响主路由的稳定，又可以解决多设备科学上网。&lt;/p&gt;

&lt;h2 id=&quot;镜像安装&quot;&gt;镜像安装&lt;/h2&gt;

&lt;p&gt;素材地址，&lt;a href=&quot;https://drive.google.com/file/d/1_PXwS0fft44T8TDA-LT-272MMcg0XvV6/view?usp=drive_link&quot;&gt;点击谷歌云盘下载&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;将文件镜像上传到pve宿主机&quot;&gt;将文件镜像上传到PVE宿主机&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -r -P 22 /Users/zzhpeng/Downloads/openwrt.zip  root@192.168.199.225:/tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;登录系统&quot;&gt;登录系统&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@192.168.199.225
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;还原镜像&quot;&gt;还原镜像&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-cd&quot;&gt;root@xn:~# cd /tmp/
root@xn:/tmp# unzip openwrt.zip 
Archive:  openwrt.zip
   creating: openwrt/
  inflating: __MACOSX/._openwrt      
  inflating: openwrt/Openwrt.img     
  inflating: __MACOSX/openwrt/._Openwrt.img  
  inflating: openwrt/img2kvm         
  inflating: __MACOSX/openwrt/._img2kvm 
  
root@xn:/tmp# cd openwrt/
root@xn:/tmp/openwrt# ls -la
total 324128
drwxr-xr-x  2 root root      4096 Jul 30 14:05 .
drwxrwxrwt 11 root root      4096 Aug 22 09:16 ..
-rw-rw-r--  1 root root     18608 Jul 20  2023 img2kvm
-rw-rw-r--  1 root root 331874304 Nov 16  2022 Openwrt.img
root@xn:/tmp/openwrt# chmod +x img2kvm
root@xn:/tmp/openwrt# ./img2kvm ./Openwrt.img 102 vm-102-disk-0     
Converting file system to qcow2 format ...
... Done.
Importing disk to the VM 102 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;扩展磁盘原来的镜像只有320m扩展到2g&quot;&gt;扩展磁盘，原来的镜像只有320M，扩展到2G。&lt;/h3&gt;

&lt;p&gt;这里引用别人的&lt;a href=&quot;https://www.wort.cloud/post/notes/%E7%BB%99openwrt%E8%BD%AF%E4%BB%B6%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/&quot;&gt;blog 给OpenWrt软件空间扩容&lt;/a&gt;。这里需要注意，操作前做好镜像克隆以便还原，
操作错了不用重新开始。&lt;/p&gt;

&lt;h3 id=&quot;更换v2ray版本&quot;&gt;更换v2ray版本&lt;/h3&gt;

&lt;p&gt;我的机场节点是用v2ray，不知道什么版本，直接用原本的v2ray 4.26版本无法使用，然后尝试了4.0最新版本的4.45就解决了。&lt;/p&gt;

&lt;p&gt;查看原来的v2ray版本：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@OpenWrt:/usr/bin/v2ray# /usr/bin/v2ray/v2ray
V2Ray 4.26.0 (OpenWrt) Lean (go1.14.4 linux/amd64)
A unified platform for anti-censorship.
2024/08/23 09:08:19 Using config from STDIN
2024/08/23 09:08:19 [Info] v2ray.com/core/main/jsonem: Reading config: stdin:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;源文件手动下载&lt;a href=&quot;https://github.com/v2fly/v2ray-core/releases&quot;&gt;https://github.com/v2fly/v2ray-core/releases&lt;/a&gt;，然后通过openwrt的文件
上传上去到/tmp/upload/，或者scp上传。&lt;/p&gt;

&lt;p&gt;scp指令如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;scp -r -P 22 /Users/zzhpeng/Downloads/openwrt.zip  root@192.168.199.11:/tmp/upload/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更换v2ray 4.45版本&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@OpenWrt:/usr/bin/v2ray# uname -a
Linux OpenWrt 4.19.131 #0 SMP Thu Jul 30 00:46:16 2020 x86_64 GNU/Linux

//解压
root@OpenWrt:/usr/bin/v2ray# cd /tmp/upload/
root@OpenWrt:/tmp/upload# unzip -d v2ray4.45 v2ray-linux-64.zip
Archive:  v2ray-linux-64.zip
inflating: v2ray4.45/v2ray         
inflating: v2ray4.45/config.json   
inflating: v2ray4.45/vpoint_socks_vmess.json  
inflating: v2ray4.45/geoip-only-cn-private.dat  
inflating: v2ray4.45/vpoint_vmess_freedom.json  
inflating: v2ray4.45/geosite.dat   
inflating: v2ray4.45/geoip.dat     
creating: v2ray4.45/systemd/
creating: v2ray4.45/systemd/system/
inflating: v2ray4.45/systemd/system/v2ray@.service  
inflating: v2ray4.45/systemd/system/v2ray.service  
inflating: v2ray4.45/v2ctl         

//添加执行权限
root@OpenWrt:/tmp/upload# cd v2ray4.45/
root@OpenWrt:/tmp/upload/v2ray4.45# chmod +x v2ray

//测试
root@OpenWrt:/tmp/upload/v2ray4.45# /tmp/upload/v2ray4.45/v2ray
V2Ray 4.45.0 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.18.1 linux/amd64)
A unified platform for anti-censorship.
2024/08/23 09:17:21 Using default config:  /tmp/upload/v2ray4.45/config.json
2024/08/23 09:17:21 [Info] main/jsonem: Reading config: /tmp/upload/v2ray4.45/config.json
2024/08/23 09:17:22 [Warning] V2Ray 4.45.0 started

//备份原来的v2ray
root@OpenWrt:/tmp/upload/v2ray4.45# mv /usr/bin/v2ray/v2ray  /usr/bin/v2ray/v2ray-bk

//将新的复制份过去
root@OpenWrt:/tmp/upload/v2ray4.45# cp /tmp/upload/v2ray4.45/ /tmp/upload/v2ray/v2ray
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;效果&quot;&gt;效果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;img/2024-07-30-pve-add-openwrt/openwrt-passwall.png&quot; alt=&quot;openwrt-passwall&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2024年07月30日 14:50:54 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1、&lt;a href=&quot;https://www.wort.cloud/post/notes/%E7%BB%99openwrt%E8%BD%AF%E4%BB%B6%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9&quot;&gt;给OpenWrt软件空间扩容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sun, 04 Aug 2024 00:00:00 +0800</pubDate>
				<link>/pve-add-openwrt.html</link>
				<guid isPermaLink="true">/pve-add-openwrt.html</guid>
			</item>
		
			<item>
				<title>github个人首页自动展示你最近写的blog文章</title>
				<description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;看到篇文章，可以将自己的Blog最近的几篇文章自动同步在github自己的首页上。如下面：
&lt;img src=&quot;https://user-images.githubusercontent.com/8397274/88047382-29b8b280-cb6f-11ea-9efb-2af2b10f3e0c.png&quot; alt=&quot;案例1&quot; /&gt;
感觉挺有意思就弄起来了。&lt;/p&gt;

&lt;h2 id=&quot;动手&quot;&gt;动手&lt;/h2&gt;

&lt;p&gt;原理是开发者基于 GitHub Actions 开发新的小功能。我这里用到一个开源项目叫 &lt;a href=&quot;https://github.com/gautamkrishnar/blog-post-workflow&quot;&gt;blog-post-workflow&lt;/a&gt;，它可以通过
RSS（订阅源）来获取到博客的最新文章。以下是实现的步骤：&lt;/p&gt;

&lt;p&gt;1.将以下部分添加到您的 README.md 文件中，您可以指定您想要的任何标题。只需确保在自述文件中使用&lt;!-- BLOG-POST-LIST:START --&gt;&lt;!-- BLOG-POST-LIST:END --&gt; 即可。工作流程将用实际的
博客文章列表替换此评论：&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Blog posts (可修改这部分)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、打开&lt;a href=&quot;https://github.com/yourname/yourname/actions&quot;&gt;https://github.com/YOUR_NAME/YOUR_NAME/actions&lt;/a&gt;，建个文件 new workflow。&lt;/p&gt;

&lt;p&gt;3、新建一个blog-post-workflow.yml文件，复制下面的内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;name: Latest blog post workflow
on:
  schedule: # Run workflow automatically
    - cron: '0 * * * *' # Runs every hour, on the hour
  workflow_dispatch: # Run workflow manually (without waiting for the cron to be called), through the GitHub Actions Workflow page directly
permissions:
  contents: write # To write the generated contents to the readme

jobs:
  update-readme-with-blog:
    name: Update this repo's README with latest blog posts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Pull in dev.to posts
        uses: gautamkrishnar/blog-post-workflow@v1
        with:
          feed_list: &quot;https://dev.to/feed/gautamkrishnar,https://www.gautamkrishnar.com/feed/&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4、修改上面的feed_list的url为你想要的Blog的RSS链接，我的Blog是jekyll搭建的，有RSS的功能，所以填了http://chunpat.com/feed.xml。&lt;/p&gt;

&lt;p&gt;5、查看 GitHub Actions。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/2024-07-28-github-readme-add-post/github-page.jpg&quot; alt=&quot;github-page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/2024-07-28-github-readme-add-post/myhome.jpg&quot; alt=&quot;github-page&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2024年07月28日 14:50:54 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1、&lt;a href=&quot;https://shenxianpeng.github.io/2021/11/special-repository/&quot;&gt;GitHub Actions 还能这么玩？自动将发布的博客文章更新到 GitHub 个人主页&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2、&lt;a href=&quot;https://github.com/gautamkrishnar/blog-post-workflow&quot;&gt;https://github.com/gautamkrishnar/blog-post-workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sun, 28 Jul 2024 00:00:00 +0800</pubDate>
				<link>/github-readme-add-post.html</link>
				<guid isPermaLink="true">/github-readme-add-post.html</guid>
			</item>
		
			<item>
				<title>避免死循环-记一次问题排查</title>
				<description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;最近有个简单的队列tp-queue时不时出现问题，出问题后就整个队列卡住了。
使用的是ThinkPHP的think-queue，项目地址：https://github.com/top-think/think-queue。&lt;/p&gt;

&lt;h2 id=&quot;排查&quot;&gt;排查&lt;/h2&gt;

&lt;p&gt;执行程序&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; nohup /www/server/php/72/bin/php think queue:listen --queue=storeSystemJobQueue --delay=0 --memory=2048 --sleep=3 --tries=0
  &amp;gt;&amp;gt; queue.log  2&amp;gt;&amp;amp;1

#  参数解析  
#      --queue[=QUEUE]      The queue to listen on
#      --delay[=DELAY]      Amount of time to delay failed jobs [default: 0]
#      --memory[=MEMORY]    The memory limit in megabytes [default: 128]
#      --timeout[=TIMEOUT]  Seconds a job may run before timing out [default: 60]
#      --sleep[=SLEEP]      Seconds to wait before checking queue for jobs [default: 3]
#      --tries[=TRIES]      Number of times to attempt a job before logging it failed [default: 0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用的是数据库驱动，数据库存储数据。出问题后显示的是队列执行成功，但是没有消化，然后就卡住了。&lt;/p&gt;

&lt;p&gt;数据库sql日志执行的是这三条：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更新： 将处理数据，但是没有消化的队列数据初始化, 并更新尝试次数+1；&lt;/li&gt;
  &lt;li&gt;查询:  查询一条有效数据；&lt;/li&gt;
  &lt;li&gt;更新： 处理完业务，更新；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sql语句如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ 2022-12-01T17:46:04+08:00 ][ sql ] [ SQL ] UPDATE `store_system_jobs`  SET `reserved` = 0 , `reserved_at` = NULL , `attempts` = `attempts` + 1  WHERE  `queue` = 'storeSystemWarehousingJobQueue'  AND `reserved` = 1  AND `reserved_at` &amp;lt;= 1669886164 [ RunTime:0.003657s ]
[ 2022-12-01T17:46:04+08:00 ][ sql ] [ SQL ] SELECT * FROM `store_system_jobs` WHERE  `queue` = 'storeSystemWarehousingJobQueue'  AND `reserved` = 0  AND `available_at` &amp;lt;= 1669887964 ORDER BY `id` ASC LIMIT 1   FOR UPDATE [ RunTime:0.004706s ]
[ 2022-12-01T17:46:04+08:00 ][ sql ] [ SQL ] UPDATE `store_system_jobs`  SET `reserved` = 1 , `reserved_at` = 1669887964  WHERE  `id` = 450 [ RunTime:0.004191s ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我梳理下，简易流程图如下：
&lt;img src=&quot;https://img.chunpat.cn/queue%400.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;程序挂了，任务不跑，第一开始没思路，临时解决的是重启，但是执行一段时间又不行，特别是高峰的时候很绝望。然后想的是性能问题，是不是数据库介质不行。
开始查看数据库是不是产生了死锁了，删除锁。查看锁的语句如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//查锁
select * from information_schema.innodb_trx
//删锁 id
kill 738178711
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后又可以了。又过了一段时间，还是不行。只能重新排查，突然发现在重启队列的时候，查看数据库锁看到有条没读锁的sql，一直挂着，然后查看业务代码
，发现这不就是查看据库数据是否重复数据的sql语句吗？，这里产生了死循环，效果就会出现下面流程图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.chunpat.cn/queue%401.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于框架队列默认超时机制是60s，超过了就会重新执行，直到达到一定次数，程序就会die。这里面有日志，但是没留意这个超时异常中断的记录。&lt;/p&gt;

&lt;h2 id=&quot;反思&quot;&gt;反思&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1、 优化队列，超时记录与报警。&lt;/li&gt;
  &lt;li&gt;2、 代码不可以留有死循环的可能，一定杜绝，一开始就设定个次数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2022年12月12日 09:00:00 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;1、&lt;a href=&quot;https://blog.csdn.net/java__project/article/details/100137526&quot;&gt;Lock wait timeout exceeded; try restarting transaction&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 10 Dec 2022 00:00:00 +0800</pubDate>
				<link>/habit.html</link>
				<guid isPermaLink="true">/habit.html</guid>
			</item>
		
			<item>
				<title>Linux角色，目录权限(含实际案例)</title>
				<description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;有时候程序写入内容、创建文件目录无权限问题导致程序异常。这大部分是没有搞清权限
和角色的问题。今天就结合实际案例去复习并整理下。&lt;/p&gt;

&lt;h2 id=&quot;知识储备&quot;&gt;知识储备&lt;/h2&gt;

&lt;h3 id=&quot;基础&quot;&gt;基础&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;权限&lt;/th&gt;
      &lt;th&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;读取（r）&lt;/td&gt;
      &lt;td&gt;允许查看文件内容，显示目录列表，对应数字4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;写入（w）&lt;/td&gt;
      &lt;td&gt;允许修改文件内容，允许在目录中新建、删除、移动文件或者子目录，对应数字2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;可执行（x）&lt;/td&gt;
      &lt;td&gt;允许运行程序，切换目录，对应数字1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;无权限（-）&lt;/td&gt;
      &lt;td&gt;没有权限&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在某个项目下，操作如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com$ ls -la
total 892
...//省略
-rw-r--r--  1 onehour onehour    146 Mar 10  2022 apidoc.json
...//省略
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;表格解析如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;-rw-r–r–&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;onehour onehour&lt;/th&gt;
      &lt;th&gt;146&lt;/th&gt;
      &lt;th&gt;Mar 10  2022&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;文件类型与权限&lt;/td&gt;
      &lt;td&gt;如果是目录，表示下面文件个数&lt;/td&gt;
      &lt;td&gt;归属，第一个onehour是属主，第二个是属主的分组&lt;/td&gt;
      &lt;td&gt;文件大小，默认普通文件才直接显示大小，单位字节B。&lt;/td&gt;
      &lt;td&gt;修改日期&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;文件类型与权限&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以拆开四个组件 -、rw-、r–、r–, 对应 文件类型、属主权限 、属组权限 、其他人权限。&lt;/p&gt;

&lt;p&gt;其中文件类型有常用的四种，如下表。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;文件类型符号&lt;/th&gt;
      &lt;th&gt;代表&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;普通文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;代表目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;代表字符型文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;l&lt;/td&gt;
      &lt;td&gt;代表链接文件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;操作&quot;&gt;操作&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;权限修改 &lt;strong&gt;chmod&lt;/strong&gt; 原本权限是644-》777&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我是用权限对应的数字去修改， 如下&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; apidoc.json           
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 onehour onehour 146 Mar 10  2022 apidoc.json
onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 777 apidoc.json
onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; apidoc.json 
&lt;span class=&quot;nt&quot;&gt;-rwxrwxrwx&lt;/span&gt; 1 onehour onehour 146 Mar 10  2022 apidoc.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;操作解释&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;chmod&lt;/th&gt;
      &lt;th&gt;-R&lt;/th&gt;
      &lt;th&gt;777&lt;/th&gt;
      &lt;th&gt;apidoc.json&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;权限修改&lt;/td&gt;
      &lt;td&gt;下面有目录，继承&lt;/td&gt;
      &lt;td&gt;属主权限 、属组权限 、其他人权限 都是满权限&lt;/td&gt;
      &lt;td&gt;文件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;归属（所有权）&lt;strong&gt;chown&lt;/strong&gt; 原本归属是onehour onehour -》www www&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; apidoc.json 
&lt;span class=&quot;nt&quot;&gt;-rwxrwxrwx&lt;/span&gt; 1 onehour onehour 146 Mar 10  2022 apidoc.json
onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; www:www apidoc.json 
onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; apidoc.json 
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 www www 146 Mar 10  2022 apidoc.json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;实战&quot;&gt;实战&lt;/h2&gt;

&lt;p&gt;假设用的是宝塔管理服务器，用的nginx代理服务，执行的用户www:www，默认配置如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user  www www;  //执行用户
worker_processes auto;
error_log  /www/wwwlogs/nginx_error.log  crit;
pid        /www/server/nginx/logs/nginx.pid;
worker_rlimit_nofile 51200;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cgi用的是php-fpm，执行的用户www:www，php-fpm.conf配置如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[global]
pid = /www/server/php/72/var/run/php-fpm.pid
error_log = /www/server/php/72/var/log/php-fpm.log
log_level = notice

[www] //执行用户
listen = /tmp/php-cgi-72.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.status_path = /phpfpm_72_status
pm.max_children = 100
pm.start_servers = 20
pm.min_spare_servers = 20
pm.max_spare_servers = 70
request_terminate_timeout = 100
request_slowlog_timeout = 30
slowlog = var/log/slow.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果我们登录linux服务器，用的是onehour这个账户管理与操作，那么执行git clone 下来的项目会是onehour onehour的用户组。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot$ ls -lh 
drwxr-xr-x 20 onehour onehour 4.0K Oct  5 21:57 dev.xxx.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这样会存在什么问题呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果网站访问，用php-fpm写日志操作，假设写的目录是runtime，如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com$ ls -la runtime/
total 28
drwxr-xr-x  5 onehour onehour  4096 Mar 11  2022 .
drwxr-xr-x 20 onehour onehour  4096 Oct  5 21:57 ..
drwxr-xr-x  3 onehour onehour  4096 Mar 10  2022 cache
drwxr-xr-x 10 onehour onehour  4096 Oct  1 00:30 log
drwxr-xr-x  2 onehour onehour 12288 Oct 10 11:53 temp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其他用户是r-x，是没有写入权限的。&lt;/p&gt;

&lt;p&gt;解决办法，将runtime目录归于权限为www:www&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com$ sudo chown -R www:www runtime
onehour@iZwz9at7o13nmv1vs5ps94Z:/www/wwwroot/dev.xxx.com$ ls -la runtime/              
total 28
drwxr-xr-x  5 www     www      4096 Mar 11  2022 .
drwxr-xr-x 20 onehour onehour  4096 Oct  5 21:57 ..
drwxr-xr-x  3 www     www      4096 Mar 10  2022 cache
drwxr-xr-x 10 www     www      4096 Oct  1 00:30 log
drwxr-xr-x  2 www     www     12288 Oct 10 11:53 temp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;额外，如果执行脚本，用crontab去跑，这里的执行用户就是登录的账号onehour了,那么写日志是没权限的，这个怎么办呢？&lt;/p&gt;

&lt;p&gt;我这边的做法是将执行crontab的用户改为www去执行。
这里改的话，需要登录对应账号执行crontab -e编辑，或者在root账号下crontab -e -u www。&lt;/p&gt;

&lt;p&gt;如果是脚本，像宝塔的计划任务用的是root执行，可以改写成下面这样:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;su -s /bin/bash - www &amp;lt;&amp;lt;EOF
.......//todo执行的命令
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2022年10月15日 21:00:00 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;1、&lt;a href=&quot;https://segmentfault.com/a/1190000039202476&quot;&gt;一文带你彻底搞懂Linux 文件权限管理&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 15 Oct 2022 00:00:00 +0800</pubDate>
				<link>/linux-permission.html</link>
				<guid isPermaLink="true">/linux-permission.html</guid>
			</item>
		
			<item>
				<title>处理 Mysql Show Query 实际案例</title>
				<description>&lt;h2 id=&quot;tp51-sql日志&quot;&gt;TP5.1 SQL日志&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../img/20220517mysql-show-log/1.jpeg&quot; alt=&quot;../img/20220517mysql-show-log/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;总耗时6.983733s, 主要划线的两条sql合计5.5s占据。&lt;/p&gt;

&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;

&lt;p&gt;优先处理store_system_depot_exchange表 索引查看&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SHOW INDEX FROM store_system_depot_exchange;
+-----------------------------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table                       | Non_unique | Key_name     | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-----------------------------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| store_system_depot_exchange |          0 | PRIMARY      |            1 | id          | A         |     2794646 |     NULL | NULL   |      | BTREE      |         |               |
| store_system_depot_exchange |          1 | storeId_type |            1 | store_id    | A         |         975 |     NULL | NULL   |      | BTREE      |         |               |
| store_system_depot_exchange |          1 | storeId_type |            2 | type        | A         |        3965 |     NULL | NULL   | YES  | BTREE      |         |               |
+-----------------------------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数据查看，0.35s，这里复现不出生产环境&lt;strong&gt;秒&lt;/strong&gt;级查询。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SELECT *   FROM `store_system_depot_exchange`  WHERE(`store_id`= 52    AND `create_time`&amp;gt;= '2019-09-01 00:00:00'    AND `create_time`&amp;lt;= '2019-10-17 23:59:59'    AND `type` IN('sale_output', 'repair_output', 'repair_correct_input', 'repair_correct_output')    AND `is_virtual`= 0)  AND `store_system_depot_exchange`.`delete_time` IS NULL;
...省略
:28 | 2019-10-17 09:55:28 | NULL        |          0 |
| 1607603 |    407375 |        0 |       3644 |            7609 | NULL         |        715 |   1 |       714 |       3.00 |       40.00 | sale_output           |       52 | 2019101753505152 | 2019-10-17 10:33:20 | 2019-10-17 10:33:20 | NULL        |          0 |
| 1607896 |    407475 |        0 |       2922 |          209508 | NULL         |          5 |   2 |         3 |       5.00 |       60.00 | sale_output           |       52 | 2019101710154509 | 2019-10-17 11:46:26 | 2019-10-17 11:46:26 | NULL        |          0 |
| 1608514 |    407651 |        0 |       3644 |          209547 | NULL         |          5 |   1 |         4 |       2.50 |       10.00 | sale_output           |       52 | 2019101710056511 | 2019-10-17 14:11:29 | 2019-10-17 14:11:29 | NULL        |          0 |
+---------+-----------+----------+------------+-----------------+--------------+------------+-----+-----------+------------+-------------+-----------------------+----------+------------------+---------------------+---------------------+-------------+------------+
999 rows in set (0.35 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;explain 分析&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; explain SELECT *   FROM `store_system_depot_exchange`  WHERE(`store_id`= 52    AND `create_time`&amp;gt;= '2019-09-01 00:00:00'    AND `create_time`&amp;lt;= '2019-10-17 23:59:59'    AND `type` IN('sale_output', 'repair_output', 'repair_correct_input', 'repair_correct_output')    AND `is_virtual`= 0)  AND `store_system_depot_exchange`.`delete_time` IS NULL;
+----+-------------+-----------------------------+------------+-------+---------------+--------------+---------+------+-------+----------+------------------------------------+
| id | select_type | table                       | partitions | type  | possible_keys | key          | key_len | ref  | rows  | filtered | Extra                              |
+----+-------------+-----------------------------+------------+-------+---------------+--------------+---------+------+-------+----------+------------------------------------+
|  1 | SIMPLE      | store_system_depot_exchange | NULL       | range | storeId_type  | storeId_type | 97      | NULL | 60632 |     0.11 | Using index condition; Using where |
+----+-------------+-----------------------------+------------+-------+---------------+--------------+---------+------+-------+----------+------------------------------------+
1 row in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更改索引idx_storeId_createtime ，丢弃idx_storeId_type，type重复率高，放入索引没啥效果，选create_time高变动的数据。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; CREATE INDEX idx_storeId_createtime ON store_system_depot_exchange (store_id,create_time);
Query OK, 0 rows affected (13.80 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&amp;gt;  DROP INDEX idx_storeId_type ON store_system_depot_exchange; 
 Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次查询&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SELECT *   FROM `store_system_depot_exchange`  WHERE(`store_id`= 52    AND `create_time`&amp;gt;= '2019-09-01 00:00:00'    AND `create_time`&amp;lt;= '2019-10-17 23:59:59'    AND `type` IN('sale_output', 'repair_output', 'repair_correct_input', 'repair_correct_output')    AND `is_virtual`= 0)  AND `store_system_depot_exchange`.`delete_time` IS NULL;
....省略
----+---------------------+-------------+------------+
999 rows in set (0.02 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;有关-mysql-select-qc缓存&quot;&gt;有关 Mysql Select QC缓存&lt;/h2&gt;

&lt;p&gt;在阿里云的云数据库RDS中，语句第一次查询可以复现，但是第二次就快很多倍。想到的是缓存，就查了相关资料，了解到是Select Query Cache如下。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询缓存使用情况&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SHOW STATUS LIKE 'Qcache%';
+-------------------------+--------+
| Variable_name           | Value  |
+-------------------------+--------+
| Qcache_free_blocks      | 0      |
| Qcache_free_memory      | 0      |
| Qcache_hits             | 0      |
| Qcache_inserts          | 0      |
| Qcache_lowmem_prunes    | 0      |
| Qcache_not_cached       | 668762 |
| Qcache_queries_in_cache | 0      |
| Qcache_total_blocks     | 0      |
+-------------------------+--------+
8 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;相关解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Qcache_free_blocks: 查询缓存的可用内存量 如果该值非常大，则表明缓冲区中碎片很多。&lt;/li&gt;
  &lt;li&gt;Qcache_free_memory: 查询缓存的可用内存量 Query Cache 中目前剩余的内存大小。通过这个参数我们可以较为准确的观察出当前系统中的Query Cache 内存大小是否足够，是需要增加还是过多了；&lt;/li&gt;
  &lt;li&gt;Qcache_hits: 查询缓存命中数 多少次命中。通过这个参数我们可以查看到Query Cache 的基本效果；&lt;/li&gt;
  &lt;li&gt;Qcache_inserts: 添加到查询缓存的查询数 多少次未命中然后插入。通过“Qcache_hits”和“Qcache_inserts”两个参数我们就可以算出Query Cache 的命中率了：Query Cache 命中率= Qcache_hits / ( Qcache_hits + Qcache_inserts )；&lt;/li&gt;
  &lt;li&gt;Qcache_lowmem_prunes: 由于内存不足而从查询缓存中删除的查询数 值非常大，则表明经常出现缓冲不够的情况;&lt;/li&gt;
  &lt;li&gt;Qcache_not_cached: 非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存） 因为query_cache_type 的设置或者不能被cache 的Query 的数量；&lt;/li&gt;
  &lt;li&gt;Qcache_queries_in_cache: 查询缓存中注册的查询数 当前Query Cache 中cache 的Query 数量；&lt;/li&gt;
  &lt;li&gt;Qcache_total_blocks: 查询缓存中的块总数 表示当前查询缓存占用的内存的block数量&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;查找缓存开启情况&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查询&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SHOW  variables LIKE 'query_cache_type';
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| query_cache_type | OFF   |
+------------------+-------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：即使是OFF, ALIYUN MYSQL在短时间内查询还是会使用缓存&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;缓存关闭与开启&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1、临时的直接再命令行执行&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set global query_cache_size=0
set global query_cache_type=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、永久&lt;/p&gt;

&lt;p&gt;my.cnf修改query_cache_size=0、query_cache_type=0&lt;/p&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2022年05月17日 23:59:59 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;1、&lt;a href=&quot;https://www.cnblogs.com/WangXianSCU/p/14490217.html&quot;&gt;MySQL查询缓存简单使用 - pedro7 - 博客园&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 17 May 2022 00:00:00 +0800</pubDate>
				<link>/mysql-slow-log.html</link>
				<guid isPermaLink="true">/mysql-slow-log.html</guid>
			</item>
		
			<item>
				<title>PHP 单元测试 与 Gitlab-CI</title>
				<description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;不做单元测试，你对你的代码有信心吗？&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、composer 组件安装&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2、composer.phar指令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;官方案例&quot;&gt;官方案例&lt;/h2&gt;

&lt;p&gt;这里结合ThinkPHP6 做案例，PHPUnit 8 的版本。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;安装组件包&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//直接组件安装
composer require --dev phpunit/phpunit ^8

//查看版本
➜  tp6 git:(master) ✗ ./vendor/bin/phpunit --version
PHPUnit 8.5.26 #StandWithUkraine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;修改composer.json的自动加载目录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ...
    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;app\\&quot;: &quot;app&quot;,
            &quot;tests\\&quot;: &quot;tests&quot;
        },
        &quot;psr-0&quot;: {
            &quot;&quot;: &quot;extend/&quot;
        }
    },
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;案例代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//
&amp;lt;?php

namespace tests\src;

use think\exception\InvalidArgumentException;

final class Email
{
    private $email;

    private function __construct(string $email)
    {
        $this-&amp;gt;ensureIsValidEmail($email);

        $this-&amp;gt;email = $email;
    }

    public static function fromString(string $email): self
    {
        return new self($email);
    }

    public function __toString(): string
    {
        return $this-&amp;gt;email;
    }

    private function ensureIsValidEmail(string $email): void
    {
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            throw new InvalidArgumentException(
                sprintf(
                    '&quot;%s&quot; is not a valid email address',
                    $email
                )
            );
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;测试案例代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

namespace tests;

use PHPUnit\Framework\TestCase;
use tests\src\Email;
use think\exception\InvalidArgumentException;

final class EmailTest extends TestCase
{
    public function testCanBeCreatedFromValidEmailAddress(): void
    {
        $this-&amp;gt;assertInstanceOf(
            Email::class,
            Email::fromString('user@example.com')
        );
    }

    public function testCannotBeCreatedFromInvalidEmailAddress(): void
    {
        $this-&amp;gt;expectException(InvalidArgumentException::class);

        Email::fromString('invalid');
    }

    public function testCanBeUsedAsString(): void
    {
        $this-&amp;gt;assertEquals(
            'user@example.com',
            Email::fromString('user@example.com')
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用PHPSTORM的自带命令测试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;phpstorm测试结果如下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/Cellar/php/7.3.9_1/bin/php /Volumes/work/www/chunpat/tp6/vendor/phpunit/phpunit/phpunit --no-configuration --filter tests\\EmailTest --test-suffix EmailTest.php /Volumes/work/www/chunpat/tp6/tests --teamcity --cache-result-file=/Volumes/work/www/chunpat/tp6/.phpunit.result.cache
Testing started at 12:10 AM ...
PHPUnit 8.5.26 #StandWithUkraine



Time: 104 ms, Memory: 6.00 MB

OK (3 tests, 3 assertions)

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2022年04月18日 23:59:59 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;1、&lt;/p&gt;
</description>
				<pubDate>Mon, 18 Apr 2022 00:00:00 +0800</pubDate>
				<link>/phpunit-test.html</link>
				<guid isPermaLink="true">/phpunit-test.html</guid>
			</item>
		
			<item>
				<title>基于阿里云日志服务（SLS）做日志处理方案</title>
				<description>&lt;h2 id=&quot;关于日志服务sls&quot;&gt;关于日志服务（SLS）&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;介绍&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里有几个概念，项目project，日志存储Logstore，集器logtail，机器组。
&lt;img src=&quot;../img/log-system/log-system_1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;计费&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;为什么用&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;采集&quot;&gt;采集&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;认证&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果同一ECS账号下,不用身份认证&lt;/p&gt;

&lt;h2 id=&quot;生产者规范&quot;&gt;生产者规范&lt;/h2&gt;

&lt;h2 id=&quot;应用案例&quot;&gt;应用案例&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;nginx 统计pv pu&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;项目异常处理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;error 外其他级别处理，汇中统计&lt;/p&gt;

&lt;p&gt;error 等级别，立即报警&lt;/p&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2022年03月26日 23:59:59 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;1、&lt;/p&gt;
</description>
				<pubDate>Sat, 26 Mar 2022 00:00:00 +0800</pubDate>
				<link>/log-system.html</link>
				<guid isPermaLink="true">/log-system.html</guid>
			</item>
		
			<item>
				<title>PHP 异常处理</title>
				<description>&lt;h2 id=&quot;php-错误处理&quot;&gt;PHP 错误处理&lt;/h2&gt;

&lt;p&gt;PHP因为便捷灵活，入门门槛低，严谨包容性大，如果使用不当，就容易写出很多难以入目与维护的代码。至此，如果想项目长久发展。
配置好相应的设置，加强把控至关重要。&lt;/p&gt;

&lt;h2 id=&quot;php-的错误级别种类&quot;&gt;PHP 的错误级别种类&lt;/h2&gt;

&lt;p&gt;摘取了宝塔管理软件下的php.ini 配置下关于错误处理与记录的描述。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Error handling and logging ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This directive informs PHP of which errors, warnings and notices you would like
; it to take action for. The recommended way of setting values for this
; directive is through the use of the error level constants and bitwise
; operators. The error level constants are below here for convenience as well as
; some common settings and their meanings.
; By default, PHP is set to take action on all errors, notices and warnings EXCEPT
; those related to E_NOTICE and E_STRICT, which together cover best practices and
; recommended coding standards in PHP. For performance reasons, this is the
; recommend error reporting setting. Your production server shouldn't be wasting
; resources complaining about best practices and coding standards. That's what
; development servers and development settings are for.
; Note: The php.ini-development file has this setting as E_ALL. This
; means it pretty much reports everything which is exactly what you want during
; development and early testing.
;
; Error Level Constants:
; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)
; E_ERROR           - fatal run-time errors
; E_RECOVERABLE_ERROR  - almost fatal run-time errors
; E_WARNING         - run-time warnings (non-fatal errors)
; E_PARSE           - compile-time parse errors
; E_NOTICE          - run-time notices (these are warnings which often result
;                     from a bug in your code, but it's possible that it was
;                     intentional (e.g., using an uninitialized variable and
;                     relying on the fact it is automatically initialized to an
;                     empty string)
; E_STRICT          - run-time notices, enable to have PHP suggest changes
;                     to your code which will ensure the best interoperability
;                     and forward compatibility of your code
; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup
; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's
;                     initial startup
; E_COMPILE_ERROR   - fatal compile-time errors
; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)
; E_USER_ERROR      - user-generated error message
; E_USER_WARNING    - user-generated warning message
; E_USER_NOTICE     - user-generated notice message
; E_DEPRECATED      - warn about code that will not work in future versions
;                     of PHP
; E_USER_DEPRECATED - user-generated deprecation warnings
;
; Common Values:
;   E_ALL (Show all errors, warnings and notices including coding standards.)
;   E_ALL &amp;amp; ~E_NOTICE  (Show all errors, except for notices)
;   E_ALL &amp;amp; ~E_NOTICE &amp;amp; ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)
;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)
; Default Value: E_ALL &amp;amp; ~E_NOTICE &amp;amp; ~E_STRICT &amp;amp; ~E_DEPRECATED
; Development Value: E_ALL
; Production Value: E_ALL &amp;amp; ~E_DEPRECATED &amp;amp; ~E_STRICT
; http://php.net/error-reporting
error_reporting = E_ALL &amp;amp; ~E_NOTICE

; This directive controls whether or not and where PHP will output errors,
; notices and warnings too. Error output is very useful during development, but
; it could be very dangerous in production environments. Depending on the code
; which is triggering the error, sensitive information could potentially leak
; out of your application such as database usernames and passwords or worse.
; For production environments, we recommend logging errors rather than
; sending them to STDOUT.
; Possible Values:
;   Off = Do not display any errors
;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)
;   On or stdout = Display errors to STDOUT
; Default Value: On
; Development Value: On
; Production Value: Off
; http://php.net/display-errors
display_errors = On

; The display of errors which occur during PHP's startup sequence are handled
; separately from display_errors. PHP's default behavior is to suppress those
; errors from clients. Turning the display of startup errors on can be useful in
; debugging configuration problems. We strongly recommend you
; set this to 'off' for production servers.
; Default Value: Off
; Development Value: On
; Production Value: Off
; http://php.net/display-startup-errors
display_startup_errors = Off

; Besides displaying errors, PHP can also log errors to locations such as a
; server-specific log, STDERR, or a location specified by the error_log
; directive found below. While errors should not be displayed on productions
; servers they should still be monitored and logging is a great way to do that.
; Default Value: Off
; Development Value: On
; Production Value: On
; http://php.net/log-errors
log_errors = On

; Set maximum length of log_errors. In error_log information about the source is
; added. The default is 1024 and 0 allows to not apply any maximum length at all.
; http://php.net/log-errors-max-len
log_errors_max_len = 1024

; Do not log repeated messages. Repeated errors must occur in same file on same
; line unless ignore_repeated_source is set true.
; http://php.net/ignore-repeated-errors
ignore_repeated_errors = Off

; Ignore source of message when ignoring repeated messages. When this setting
; is On you will not log errors with repeated messages from different files or
; source lines.
; http://php.net/ignore-repeated-source
ignore_repeated_source = Off

; If this parameter is set to Off, then memory leaks will not be shown (on
; stdout or in the log). This has only effect in a debug compile, and if
; error reporting includes E_WARNING in the allowed list
; http://php.net/report-memleaks
report_memleaks = On

; This setting is on by default.
;report_zend_debug = 0

; Store the last error/warning message in $php_errormsg (boolean). Setting this value
; to On can assist in debugging and is appropriate for development servers. It should
; however be disabled on production servers.
; This directive is DEPRECATED.
; Default Value: Off
; Development Value: Off
; Production Value: Off
; http://php.net/track-errors
;track_errors = Off

; Turn off normal error reporting and emit XML-RPC error XML
; http://php.net/xmlrpc-errors
;xmlrpc_errors = 0

; An XML-RPC faultCode
;xmlrpc_error_number = 0

; When PHP displays or logs an error, it has the capability of formatting the
; error message as HTML for easier reading. This directive controls whether
; the error message is formatted as HTML or not.
; Note: This directive is hardcoded to Off for the CLI SAPI
; Default Value: On
; Development Value: On
; Production value: On
; http://php.net/html-errors
html_errors = On

; If html_errors is set to On *and* docref_root is not empty, then PHP
; produces clickable error messages that direct to a page describing the error
; or function causing the error in detail.
; You can download a copy of the PHP manual from http://php.net/docs
; and change docref_root to the base URL of your local copy including the
; leading '/'. You must also specify the file extension being used including
; the dot. PHP's default behavior is to leave these settings empty, in which
; case no links to documentation are generated.
; Note: Never use this feature for production boxes.
; http://php.net/docref-root
; Examples
;docref_root = &quot;/phpmanual/&quot;

; http://php.net/docref-ext
;docref_ext = .html

; String to output before an error message. PHP's default behavior is to leave
; this setting blank.
; http://php.net/error-prepend-string
; Example:
;error_prepend_string = &quot;&amp;lt;span style='color: #ff0000'&amp;gt;&quot;

; String to output after an error message. PHP's default behavior is to leave
; this setting blank.
; http://php.net/error-append-string
; Example:
;error_append_string = &quot;&amp;lt;/span&amp;gt;&quot;

; Log errors to specified file. PHP's default behavior is to leave this value
; empty.
; http://php.net/error-log
; Example:
error_log = /tmp/php_errors.log
; Log errors to syslog (Event Log on Windows).
;error_log = syslog

;windows.show_crt_warning
; Default value: 0
; Development value: 0
; Production value: 0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面是官方中文版的解释，链接：&lt;a href=&quot;https://www.php.net/manual/zh/errorfunc.constants.php&quot;&gt;https://www.php.net/manual/zh/errorfunc.constants.php&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;值&lt;/th&gt;
      &lt;th&gt;常量&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;E_ERROR (int)&lt;/td&gt;
      &lt;td&gt;致命的运行时错误。这类错误一般是不可恢复的情况，例如内存分配导致的问题。后果是导致脚本终止不再继续运行。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;E_WARNING (int)&lt;/td&gt;
      &lt;td&gt;运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;E_PARSE (int)&lt;/td&gt;
      &lt;td&gt;编译时语法解析错误。解析错误仅仅由分析器产生。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;E_NOTICE (int)&lt;/td&gt;
      &lt;td&gt;运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;E_CORE_ERROR (int)&lt;/td&gt;
      &lt;td&gt;在 PHP 初始化启动过程中发生的致命错误。该错误类似 E_ERROR，但是是由 PHP 引擎核心产生的。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;E_CORE_WARNING (int)&lt;/td&gt;
      &lt;td&gt;PHP 初始化启动过程中发生的警告 (非致命错误) 。类似 E_WARNING，但是是由 PHP 引擎核心产生的。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;E_COMPILE_ERROR (int)&lt;/td&gt;
      &lt;td&gt;致命编译时错误。类似 E_ERROR，但是是由 Zend 脚本引擎产生的。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;E_COMPILE_WARNING (int)&lt;/td&gt;
      &lt;td&gt;编译时警告 (非致命错误)。类似 E_WARNING，但是是由 Zend 脚本引擎产生的。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;256&lt;/td&gt;
      &lt;td&gt;E_USER_ERROR (int)&lt;/td&gt;
      &lt;td&gt;用户产生的错误信息。类似 E_ERROR，但是是由用户自己在代码中使用 PHP 函数 trigger_error()来产生的。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;512&lt;/td&gt;
      &lt;td&gt;E_USER_WARNING (int)&lt;/td&gt;
      &lt;td&gt;用户产生的警告信息。类似 E_WARNING，但是是由用户自己在代码中使用 PHP 函数 trigger_error()来产生的。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1024&lt;/td&gt;
      &lt;td&gt;E_USER_NOTICE (int)&lt;/td&gt;
      &lt;td&gt;用户产生的通知信息。类似 E_NOTICE，但是是由用户自己在代码中使用 PHP 函数 trigger_error()来产生的。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2048&lt;/td&gt;
      &lt;td&gt;E_STRICT (int)&lt;/td&gt;
      &lt;td&gt;启用 PHP 对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性。&lt;/td&gt;
      &lt;td&gt;PHP 5.4.0 之前的版本中不包含 E_ALL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4096&lt;/td&gt;
      &lt;td&gt;E_RECOVERABLE_ERROR&lt;/td&gt;
      &lt;td&gt;(int)    可被捕捉的致命错误。 它表示发生了一个可能非常危险的错误，但是还没有导致PHP引擎处于不稳定的状态。 如果该错误没有被用户自定义句柄捕获 (参见 set_error_handler())，将成为一个 E_ERROR　从而脚本会终止运行。&lt;/td&gt;
      &lt;td&gt;自 PHP 5.2.0 起&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8192&lt;/td&gt;
      &lt;td&gt;E_DEPRECATED (int)&lt;/td&gt;
      &lt;td&gt;运行时通知。启用后将会对在未来版本中可能无法正常工作的代码给出警告。&lt;/td&gt;
      &lt;td&gt;自 PHP 5.3.0 起&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16384&lt;/td&gt;
      &lt;td&gt;E_USER_DEPRECATED&lt;/td&gt;
      &lt;td&gt;(int)    用户产生的警告信息。 类似 E_DEPRECATED, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。&lt;/td&gt;
      &lt;td&gt;自 PHP 5.3.0 起&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;32767&lt;/td&gt;
      &lt;td&gt;E_ALL (int)&lt;/td&gt;
      &lt;td&gt;PHP 5.4.0 之前为 E_STRICT 除外的所有错误和警告信息。 PHP 5.4.x 中为 32767, PHP 5.3.x 中为 30719, PHP 5.2.x 中为 6143, 更早之前的 PHP 版本中为 2047。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我截取配置，把注释去掉，并在对应下方加上自己的理解，来源：https://www.php.net/manual/zh/errorfunc.configuration.php&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error_reporting = E_ALL &amp;amp; ~E_NOTICE
//错误显示级别
display_errors = On
//错误显示开关
display_startup_errors = Off
//启动php显示错误，这个在开发环境是开启，生产关闭。
log_errors = On
//错误日志记录开关
log_errors_max_len = 1024
//不记录重复的信息。重复的错误必须出现在同一个文件中的同一行代码上，除非 ignore_repeated_source 设置为true。
ignore_repeated_errors = Off
//忽略重复消息时，也忽略消息的来源。当该设置开启时，重复信息将不会记录它是由不同的文件还是不同的源代码行产生的。
ignore_repeated_source = Off
忽略重复消息时，也忽略消息的来源。当该设置开启时，重复信息将不会记录它是由不同的文件还是不同的源代码行产生的。
report_memleaks = On
如果这个参数设置为Off，则内存泄露信息不会显示 (在 stdout 或者日志中)。
html_errors = On
在错误信息中关闭HTML标签。这种新的HTML格式的错误信息是可以点击，它引导用户前往描述该错误或者导致该错误发生的函数的参考信息页面。 
error_log = /tmp/php_errors.log
设置脚本错误将被记录到的文件。该文件必须是web服务器用户可写的。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;原生代码演示&quot;&gt;原生代码演示&lt;/h2&gt;

&lt;p&gt;这里演示日常开发常常遇到的，分别是&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1、E_NOTICE (int)&lt;/li&gt;
  &lt;li&gt;2、E_PARSE (int)&lt;/li&gt;
  &lt;li&gt;3、E_STRICT (int)&lt;/li&gt;
  &lt;li&gt;4、E_DEPRECATED (int)&lt;/li&gt;
  &lt;li&gt;5、E_WARNING (int)&lt;/li&gt;
  &lt;li&gt;6、E_ERROR (int)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先默认配置如下，error_reporting = E_ALL &amp;amp; ~E_NOTICE，表示所有错误都显示出来，除了E_NOTICE，这里为了测试
E_NOTICE是什么错误，我配置修改为如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error_reporting = E_ALL
//错误显示级别
display_errors = On
//错误显示开关
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;针对上面日常遇到的错误，进行代码实操：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;E_NOTICE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实例代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
echo $aa;

// Notice: Undefined variable: aa in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;E_WARNING&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实例代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
echo aa;

// Warning: Use of undefined constant aa - assumed 'aa' (this will throw an Error in a future version of PHP) in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 2
string(1) &quot;a&quot;

&amp;lt;?php
$person-&amp;gt;name = 'Rasmus Lerdorf';
//Warning: Creating default object from empty value in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;E_PARSE (int)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实例代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;z = 1;
// Parse error: syntax error, unexpected '=' in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;E_DEPRECATED (int)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实例代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
$size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB);

// Deprecated: Function mcrypt_get_block_size() is deprecated in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;E_STRICT (int)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;抱歉，PHP7.0以后就没有这个分类了，合并到其他分类去了&lt;/strong&gt; ，来源链接: &lt;a href=&quot;https://wiki.php.net/rfc/reclassify_e_strict&quot;&gt;https://wiki.php.net/rfc/reclassify_e_strict&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面演示的是旧版本，PHP7.0前版本。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
class Person {
    var $name;

    function __construct($name) {
        $this-&amp;gt;name = $name;
    }

    function Person($name) {
        $this-&amp;gt;name = $name;
    }
}

//PHP Strict Standards:  var: Deprecated. Please use the public/private/protected modifiers
                  PHP Strict Standards:  Redefining already defined constructor for class Person
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;E_ERROR (int)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实例代码&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
$aa = null;
var_dump( $aa-&amp;gt;toArray());  //这操作在ORM 对象操作经常遇到
// Fatal error: Uncaught Error: Call to a member function toArray() on null in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php:3 Stack trace: #0 {main} thrown in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 3

class Person {
    var $name;

    function __construct($name) {
        $this-&amp;gt;name = $name;
    }

    function Person($name) {
        $this-&amp;gt;name = $name;
    }
}

Person::Person();

// Fatal error: Uncaught Error: Non-static method Person::Person() cannot be called statically in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php:14 Stack trace: #0 {main} thrown in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 14

function test($test){
}
test();

//Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 6 and exactly 1 expected in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php:2 Stack trace: #0 /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php(6): test() #1 {main} thrown in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 2

throw new \Exception('aaa');
//Fatal error: Uncaught Exception: aaa in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php:2 Stack trace: #0 {main} thrown in /Volumes/work/www/onehour/onehour_docker/www/sima2/test.php on line 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;处理异常&quot;&gt;处理异常&lt;/h2&gt;

&lt;p&gt;日常开发中可以直接抛出错误，但是在生产环境中，有些警告类非中断的错误是不能影响正常业务流程的。如除了E_ERROR会中断。
那怎么办呢？可以使用set_error_handler处理并且记录异常，而不影响正常业务。 set_error_handler 不会捕抓 E_ERROR,
E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING。下面是原文：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//https://www.php.net/manual/en/function.set-error-handler
The following error types cannot be handled with a user defined function: E_ERROR, E_PARSE,
E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING independent of where they
were raised, and most of E_STRICT raised in the file where set_error_handler() is called.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;thinkphp异常处理&quot;&gt;ThinkPHP异常处理&lt;/h2&gt;

&lt;p&gt;这里演示的是ThinkPhp5.1版本的异常处理
入口文件./public/index.php，加载了基础/../thinkphp/base.php&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ./public/index.php
&amp;lt;?php
// [ 应用入口文件 ]
namespace think;

// 加载基础文件  15行
require __DIR__ . '/../thinkphp/base.php';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在/../thinkphp/base.php，加载各类基础服务&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ./public/index.php
&amp;lt;?php
// 注册错误和异常处理机制 19行
Error::register();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在/../thinkphp/library/think/Error.php，注册异常服务，写异常handle处理方法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // /../thinkphp/library/think/Error.php 32行
    /**
     * 注册异常处理
     * @access public
     * @return void
     */
    public static function register()
    {
        error_reporting(E_ALL);
        set_error_handler([__CLASS__, 'appError']);
        set_exception_handler([__CLASS__, 'appException']);
        register_shutdown_function([__CLASS__, 'appShutdown']);
    }
    
    /**
     * Error Handler
     * @access public
     * @param  integer $errno   错误编号
     * @param  integer $errstr  详细错误信息
     * @param  string  $errfile 出错的文件
     * @param  integer $errline 出错行号
     * @throws ErrorException
     */
    public static function appError($errno, $errstr, $errfile = '', $errline = 0)
    {
        $exception = new ErrorException($errno, $errstr, $errfile, $errline); //这里重写异常
        if (error_reporting() &amp;amp; $errno) {
            // 将错误信息托管至 think\exception\ErrorException
            throw $exception;  //这里抛出异常
        }

        self::getExceptionHandler()-&amp;gt;report($exception); // 这里写日志
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在/../thinkphp/library/think/exception/Error.php， 封装重写\Exception。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
namespace think\exception;

use think\Exception;

/**
 * ThinkPHP错误异常
 * 主要用于封装 set_error_handler 和 register_shutdown_function 得到的错误
 * 除开从 think\Exception 继承的功能
 * 其他和PHP系统\ErrorException功能基本一样
 */
class ErrorException extends Exception
{
    /**
     * 用于保存错误级别
     * @var integer
     */
    protected $severity;

    /**
     * 错误异常构造函数
     * @access public
     * @param  integer $severity 错误级别
     * @param  string  $message  错误详细信息
     * @param  string  $file     出错文件路径
     * @param  integer $line     出错行号
     */
    public function __construct($severity, $message, $file, $line)
    {
        $this-&amp;gt;severity = $severity;
        $this-&amp;gt;message  = $message;  //这里重写内核\Exception的变量message、file、line、code
        $this-&amp;gt;file     = $file;
        $this-&amp;gt;line     = $line;
        $this-&amp;gt;code     = 0;
    }

    /**
     * 获取错误级别
     * @access public
     * @return integer 错误级别
     */
    final public function getSeverity()
    {
        return $this-&amp;gt;severity;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;总结：&lt;strong&gt;ThinkPHP把所有错误级别都抛出，这里需要改造成警告类的错误在生产环境写入日志而不抛出&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;举例： 在application/common.php 写入。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function myErrorHandler($errno, $errstr, $errfile, $errline)
{
    if (!(error_reporting() &amp;amp; $errno)) {
        // This error code is not included in error_reporting, so let it fall
        // through to the standard PHP error handler
        return false;
    }

    // $errstr may need to be escaped:
    $errstr = htmlspecialchars($errstr);

    switch ($errno) {
        case E_DEPRECATED:
            //记录日志
            trace(&quot;&amp;lt;b&amp;gt;DEPRECATED&amp;lt;/b&amp;gt; [$errno] $errstr&quot;);
            return true;
        case E_NOTICE:
            //记录日志
            trace(&quot;&amp;lt;b&amp;gt;NOTICE&amp;lt;/b&amp;gt; : [$errno] $errstr&quot;);
            return true;
        case E_WARNING:
            //记录日志
            trace(&quot;&amp;lt;b&amp;gt;WARNING&amp;lt;/b&amp;gt; : [$errno] $errstr&quot;);
            return true;
        default:
           //记录日志
            trace(&quot;Unknown error type: [$errno] $errstr&quot;);
            return true;
    }
    /* Don't execute PHP internal error handler */
    return true;
}
// set to the user defined error handler
set_error_handler(&quot;myErrorHandler&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;laravel异常处理&quot;&gt;Laravel异常处理&lt;/h2&gt;

&lt;p&gt;查看laravel 版本&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  laravel git:(master) ✗ php artisan --version
Laravel Framework 8.83.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;composer.json文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//composer.json 35行
&quot;scripts&quot;: {
    &quot;post-autoload-dump&quot;: [
        &quot;Illuminate\\Foundation\\ComposerScripts::postAutoloadDump&quot;,  
        &quot;@php artisan package:discover --ansi&quot;
    ],
    &quot;post-update-cmd&quot;: [
        &quot;@php artisan vendor:publish --tag=laravel-assets --ansi --force&quot;
    ],
    &quot;post-root-package-install&quot;: [
        &quot;@php -r \&quot;file_exists('.env') || copy('.env.example', '.env');\&quot;&quot;
    ],
    &quot;post-create-project-cmd&quot;: [
        &quot;@php artisan key:generate --ansi&quot;
    ]
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Illuminate\Foundation\ComposerScripts::postAutoloadDump 这个静态方法，composer update 产生
/../vendor/autoload.php，加载所有核心。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Illuminate\\Foundation\\ComposerScripts::postAutoloadDump 41行
public static function postAutoloadDump(Event $event)
{
    require_once $event-&amp;gt;getComposer()-&amp;gt;getConfig()-&amp;gt;get('vendor-dir').'/autoload.php';

    static::clearCompiled();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后错误处理在这里Illuminate\Foundation\Bootstrap&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Illuminate\Foundation\Bootstrap 37行
public function bootstrap(Application $app)
{
    self::$reservedMemory = str_repeat('x', 10240);

    $this-&amp;gt;app = $app;

    error_reporting(-1);

    set_error_handler([$this, 'handleError']);

    set_exception_handler([$this, 'handleException']);

    register_shutdown_function([$this, 'handleShutdown']);

    //这里关闭了
    if (! $app-&amp;gt;environment('testing')) {
        ini_set('display_errors', 'Off');
    }
}

public function handleError($level, $message, $file = '', $line = 0, $context = [])
{
    if ($this-&amp;gt;isDeprecation($level)) {
        return $this-&amp;gt;handleDeprecation($message, $file, $line);
    }

    if (error_reporting() &amp;amp; $level) {
        //这里是错误封装
        throw new ErrorException($message, 0, $level, $file, $line);
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;2022年03月18日 23:59:59 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;1、&lt;/p&gt;
</description>
				<pubDate>Fri, 18 Mar 2022 00:00:00 +0800</pubDate>
				<link>/php-exception.html</link>
				<guid isPermaLink="true">/php-exception.html</guid>
			</item>
		
			<item>
				<title>Self-host Gitlab的相关操作</title>
				<description>&lt;h1 id=&quot;安装debian-系列系统为例&quot;&gt;安装（Debian 系列系统为例）&lt;/h1&gt;

&lt;h2 id=&quot;apt-get-直接安装&quot;&gt;apt-get 直接安装&lt;/h2&gt;

&lt;p&gt;更新gitlab源&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装，默认最新版&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install gitlab-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;进阶debian-系列系统为例&quot;&gt;进阶（Debian 系列系统为例）&lt;/h1&gt;

&lt;h2 id=&quot;已有nginx想用原来的服务&quot;&gt;已有Nginx，想用原来的服务&lt;/h2&gt;

&lt;p&gt;停gitlab自带的nginx，并且修改外部web server权限用户。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;sudo vim /etc/gitlab/gitlab.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改地方，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/2022-01-08-gitlab/advanced_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改完，重新加载配置&amp;amp;重启即可。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#重新加载配置
sudo gitlab-ctl reconfigure

#重启
sudo gitlab-ctl restart

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;定期备份与清理&quot;&gt;定期备份与清理&lt;/h2&gt;

&lt;h3 id=&quot;备份&quot;&gt;备份&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、创建备份脚本，每天00自动备份&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sudo vim /var/opt/gitlab/backups/backup.sh&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
/opt/gitlab/bin/gitlab-rake gitlab:backup:create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;crontab -e&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
0 0 * * * sh /var/opt/gitlab/backups/backup.sh &amp;gt;&amp;gt; /var/opt/gitlab/backups/backup.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;2、更改用户组(当前操作的是onehour用户)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R git:git /var/opt/gitlab/backups/backup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;3、测试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh /var/opt/gitlab/backups/backup.sh &amp;gt;&amp;gt; /var/opt/gitlab/backups/backup.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;4、设置contab&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;切换到root用户执行contab&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;contab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用nano操作&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 0 * * * sh /var/opt/gitlab/backups/backup.sh &amp;gt;&amp;gt; /var/opt/gitlab/backups/backup.log

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ctrl+X，按Y保存&lt;/p&gt;

&lt;h3 id=&quot;清理&quot;&gt;清理&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、创建备份脚本，15天前的数据自动删除&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;sudo vim /var/opt/gitlab/backups/remove.sh&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash
find &quot;/var/opt/gitlab/backups/&quot; -name &quot;*.tar&quot; -ctime +15  -exec rm -rf {} \;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;2、更改用户组(当前操作的是onehour用户)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R git:git /var/opt/gitlab/backups/remove.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;3、测试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh /var/opt/gitlab/backups/remove.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;4、设置contab&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;切换到root用户执行contab&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;contab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用nano操作&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;45 10 * * * sh /var/opt/gitlab/backups/remove.sh  &amp;gt;&amp;gt; /var/opt/gitlab/backups/remove.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ctrl+X，按Y保存&lt;/p&gt;

&lt;h2 id=&quot;升级gitlab&quot;&gt;升级gitlab&lt;/h2&gt;

&lt;p&gt;升级前记得备份好数据，以防Error，官方介绍 &lt;a href=&quot;https://about.gitlab.com/install/#ubuntu&quot;&gt;https://about.gitlab.com/install/#ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意，从低版本一次性升级到高版本可能会出问题，所以官方出了个逐步升级的路线图&lt;/strong&gt;
8.11.Z -&amp;gt; 8.12.0 -&amp;gt; 8.17.7 -&amp;gt; 9.5.10 -&amp;gt; 10.8.7 -&amp;gt; 11.11.8 -&amp;gt; 12.0.12 -&amp;gt; 
12.1.17 -&amp;gt; 12.10.14 -&amp;gt; 13.0.14 -&amp;gt; 13.1.11 -&amp;gt; 13.8.8 -&amp;gt; latest 13.12.Z -&amp;gt; latest 14.0.Z -&amp;gt; latest 14.1.Z -&amp;gt; latest 14.Y.Z&lt;/p&gt;

&lt;p&gt;官方升级路径：&lt;a href=&quot;https://docs.gitlab.com/ee/update/index.html#upgrade-paths&quot;&gt;https://docs.gitlab.com/ee/update/index.html#upgrade-paths&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;查看版本&quot;&gt;查看版本&lt;/h3&gt;

&lt;p&gt;查看详细的版本信息&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo gitlab-rake gitlab:env:info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;到官方包库寻找对应版本&quot;&gt;到官方包库寻找对应版本&lt;/h3&gt;

&lt;p&gt;包地址
&lt;a href=&quot;https://packages.gitlab.com/gitlab/gitlab-ce/&quot;&gt;https://packages.gitlab.com/gitlab/gitlab-ce/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;操作前，先更新gitlab资源路径&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查找对应的包，点击进去能看到详情，可以看到apt怎么操作之类的，例如安装12.1.17版本&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install gitlab-ce=12.1.17-ce.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这里的安装即是安装也是更新，会把你的数据也一起迁移了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;然后重启gitlab&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gitlab-ctl restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启nginx，我这里用的是外部的nginx，而且用的TCP连接，所以需要重启，重新连接socket。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意，升级到13.5.1-ce.0后，要修改nginx 转发代理的路劲&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#原来
upstream gitlab-workhorse {
  server unix:/var/opt/gitlab/gitlab-workhorse/socket  fail_timeout=0;
}

#修改
upstream gitlab-workhorse {
  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket  fail_timeout=0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;迭代&quot;&gt;迭代&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2022年01月08日 03:11:40 初稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;1、&lt;a href=&quot;https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/5756&quot;&gt;Permission denied on sockets after update to “13.5.1-ce.0” (#5756) · Issues · GitLab.org / omnibus-gitlab · GitLab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、&lt;a href=&quot;https://www.cnblogs.com/cheyunhua/p/14875506.html&quot;&gt;gitlab备份、还原及迁移 - 技术颜良 - 博客园&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 08 Jan 2022 00:00:00 +0800</pubDate>
				<link>/gitlab.html</link>
				<guid isPermaLink="true">/gitlab.html</guid>
			</item>
		
	</channel>
</rss>
